extends ../_internal-template

block vars
  - var title = 'Swiper React';
  - var noCenterContent = true;
  - var withLeftNav = true;

block content
  .side-nav.demos-nav
    .side-nav-content
      include ../_sidebar-sponsors.pug
      ul
        li
          a(href="#installation") Installation
        li
          a(href="#usage") Usage
        li
          a(href="#styles") Styles
        li
          a(href="#swiper-props") <span style="font-weight: 500">Swiper</span> props
        li
          a(href="#swiperslide-props") <span style="font-weight: 500">SwiperSlide</span> props
        li
          a(href="#slots") Slots
        li
          a(href="#virtual-slides") Virtual Slides
        li
          a(href="#controller") Controller
        li
          a(href="#thumbs") Thumbs

  .api-content
    h1 Swiper React

    h2.no-border#installation Installation

    p Swiper React available only via NPM as a part of the main Swiper library:
    ```
      npm i swiper
    ```

    h2.no-border#usage Usage

    p `swiper/react` exports 2 components: `Swiper` and `SwiperSlide`:
    ```jsx
      // Import Swiper React components
      import { Swiper, SwiperSlide } from 'swiper/react';

      // Import Swiper styles
      import 'swiper/swiper.scss';

      export default () => {
        return (
          <Swiper
            spaceBetween={50}
            slidesPerView={3}
            onSlideChange={() => console.log('slide change')}
            onSwiper={(swiper) => console.log(swiper)}
          >
            <SwiperSlide>Slide 1</SwiperSlide>
            <SwiperSlide>Slide 2</SwiperSlide>
            <SwiperSlide>Slide 3</SwiperSlide>
            <SwiperSlide>Slide 4</SwiperSlide>
            ...
          </Swiper>
        );
      };
    ```
    p By default Swiper React uses core version of Swiper (without any additional components). If you want to use Navitation, Pagination and other components, you have to install them first:
    ```jsx
      // import Swiper core and required components
      import SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';

      import { Swiper, SwiperSlide } from 'swiper/react';

      // Import Swiper styles
      import 'swiper/swiper.scss';
      import 'swiper/components/navigation/navigation.scss';
      import 'swiper/components/pagination/pagination.scss';
      import 'swiper/components/scrollbar/scrollbar.scss';

      // install Swiper components
      SwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);

      export default () => {
        return (
          <Swiper
            spaceBetween={50}
            slidesPerView={3}
            navigation
            pagination={{ clickable: true }}
            scrollbar={{ draggable: true }}
            onSwiper={(swiper) => console.log(swiper)}
            onSlideChange={() => console.log('slide change')}
          >
            <SwiperSlide>Slide 1</SwiperSlide>
            <SwiperSlide>Slide 2</SwiperSlide>
            <SwiperSlide>Slide 3</SwiperSlide>
            <SwiperSlide>Slide 4</SwiperSlide>
            ...
          </Swiper>
        );
      };
    ```
    .important-note
      p Note, Swiper React component will create required elements for Navigation, Pagination and Scrollbar if you pass these params without specifying its elements (e.g. without `navigation.nextEl`, `pagination.el`, etc.)

    h2.no-border#styles Styles

    p Swiper package contains different sets of CSS, Less and SCSS styles:

    h4 CSS Styles

    p CSS styles available only for bundle version:

    ul
      li `swiper-bundle.css` - all Swiper styles including all components styles (like Navigation, Pagination, etc.)
      li `swiper-bundle.min.css` - same as previous but minified

    h4 Less Styles

    p Less styles are separate styles for core version and components:

    ul
      li `swiper.less` - only core Swiper styles
      li `components/a11y/a11y.less` - styles required for A11y component
      li `components/controller/controller.less` - styles required for A11y component
      li `components/effect-coverflow/effect-coverflow.less` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.less` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.less` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.less` - styles required for Flip Effect component
      li `components/lazy/lazy.less` - styles required for Lazy component
      li `components/navigation/navigation.less` - styles required for Navigation component
      li `components/pagination/pagination.less` - styles required for Pagination component
      li `components/scrollbar/scrollbar.less` - styles required for Scrollbar component
      li `components/thumbs/thumbs.less` - styles required for Thumbs component
      li `components/zoom/zoom.less` - styles required for Zoom component

    h4 SCSS Styles

    p SCSS styles are also separate styles for core version and components:

    ul
      li `swiper.scss` - only core Swiper styles
      li `components/a11y/a11y.scss` - styles required for A11y component
      li `components/controller/controller.scss` - styles required for A11y component
      li `components/effect-coverflow/effect-coverflow.scss` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.scss` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.scss` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.scss` - styles required for Flip Effect component
      li `components/lazy/lazy.scss` - styles required for Lazy component
      li `components/navigation/navigation.scss` - styles required for Navigation component
      li `components/pagination/pagination.scss` - styles required for Pagination component
      li `components/scrollbar/scrollbar.scss` - styles required for Scrollbar component
      li `components/thumbs/thumbs.scss` - styles required for Thumbs component
      li `components/zoom/zoom.scss` - styles required for Zoom component

    h2.no-border#swiper-props `Swiper` props

    p `Swiper` React component receive all <a href="/api/#parameters">Swiper parameters</a> as component props, plus some extra props:
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          td tag
          td string
          td 'div'
          td Main Swiper container HTML element tag
        tr
          td wrapperTag
          td string
          td 'div'
          td Swiper wrapper HTML element tag
        tr
          td onSwiper
          td (swiper) => void
          td
          td Callback that receives Swiper instance
    p Also it supports all <a href="/api/#events">Swiper events</a> in `on{Eventname}` format. For example `slideChange` event becomes `onSlideChange` prop:
    ```jsx
      <Swiper
        onSlideChange={() => {/*...*/}}
        onReachEnd={() => {/*...*/}}
        ...
      >
    ```


    h2.no-border#swiperslide-props `SwiperSlide` props

    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          td tag
          td string
          td 'div'
          td Swiper Slide HTML element tag
        tr
          td zoom
          td boolean
          td false
          td Enables additional wrapper required for zoom mode

    h2.no-border#slots Slots

    p Swiper React uses "slots" for content distribution. There are 4 slots available
    ul
      li `container-start` - element will be added to the beginning of swiper-container
      li `container-end` (default) - element will be added to the end of swiper-container
      li `wrapper-start` - element will be added to the beginning of swiper-wrapper
      li `wrapper-end` - element will be added to the end of swiper-wrapper

    p For example:

    ```jsx
      <Swiper>
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <span slot="container-start">Container Start</span>
        <span slot="container-end">Container End</span>
        <span slot="wrapper-start">Wrapper Start</span>
        <span slot="wrapper-end">Wrapper End</span>
      </Swiper>
    ```

    p Will be rendered as:

    ```html
      <div class="swiper-container">
        <span slot="container-start">Container Start</span>
        <div class="swiper-wrapper">
          <span slot="wrapper-start">Wrapper Start</span>
          <div class="swiper-slide">Slide 1</div>
          <div class="swiper-slide">Slide 2</div>
          <span slot="wrapper-end">Wrapper End</span>
        </div>
        <span slot="container-end">Container End</span>
      </div>
    ```

    h2.no-border#virtual-slides Virtual Slides

    p Virtual Slides rendering here is fully handled by React and not required anything except setting `virtual:true` property:

    :code(lang="jsx")
      import { Swiper, SwiperSlide } from 'swiper/react';

      export default () => {
        // Create array with 1000 slides
        const slides = Array.from({ length: 1000 }).map((el, index) => `Slide ${index + 1}`);

        return (
          <Swiper spaceBetween={50} slidesPerView={3} virtual>
            {slides.map((slideContent) => {
              <SwiperSlide key={slideContent}>{slideContent}</SwiperSlide>;
            })}
          </Swiper>
        );
      };

    h2.no-border#controller Controller

    p Controller requires to pass one Swiper instance to another:

    ```jsx
      import React, { useState } from 'react';
      import SwiperCore, { Controller } from 'swiper';
      import { Swiper, SwiperSlide } from 'swiper/react';

      // install Swiper's Controller component
      Swiper.use([Controller]);

      const App = () => {
        // store controlled swiper instance
        const [controlledSwiper, setControlledSwiper] = useState(null);

        return (
          <main>
            {/* Main Swiper -> pass controlled swiper instance */}
            <Swiper controller={{ control: controlledSwiper }} ...>
              {/* ... */}
            </Swiper>

            {/* Controlled Swiper -> store swiper instance */}
            <Swiper onSwiper={setControlledSwiper} ...>
              {/* ... */}
            </Swiper>
          </main>
        )
      }
    ```

    p For two-way control (when both Swipers control each other) it should be like this:

    ```jsx
      import React, { useState } from 'react';
      import SwiperCore, { Controller } from 'swiper';
      import { Swiper, SwiperSlide } from 'swiper/react';

      // install Swiper's Controller component
      Swiper.use([Controller]);

      const App = () => {
        // store swiper instances
        const [firstSwiper, setFirstSwiper] = useState(null);
        const [secondSwiper, setSecondSwiper] = useState(null);

        return (
          <main>
            <Swiper onSwiper={setFirstSwiper} controller={{ control: secondSwiper }}>
              {/* ... */}
            </Swiper>

            <Swiper onSwiper={setSecondSwiper} controller={{ control: firstSwiper }}>
              {/* ... */}
            </Swiper>
          </main>
        )
      }
    ```

    h2.no-border#thumbs Thumbs

    p Same as with controller we need to store thumbs instance and pass it to main gallery:

    ```jsx
      import React, { useState } from 'react';
      import SwiperCore, { Thumbs } from 'swiper';
      import { Swiper, SwiperSlide } from 'swiper/react';

      // install Swiper's Thumbs component
      Swiper.use([Thumbs]);

      const App = () => {
        // store thumbs swiper instance
        const [thumbsSwiper, setThumbsSwiper] = useState(null);

        return (
          <main>
            {/* Main Swiper -> pass thumbs swiper instance */}
            <Swiper thumbs={{ swiper: thumbsSwiper }} ...>
              {/* ... */}
            </Swiper>

            {/* Thumbs Swiper -> store swiper instance */}
            <Swiper onSwiper={setThumbsSwiper} ...>
              {/* ... */}
            </Swiper>
          </main>
        )
      }
    ```

    h2.no-border#video Tutorial Video

    p Check out this 15-min getting-started video

    iframe(width='560' height='315' src='https://www.youtube.com/embed/l4kFO6VQPfA' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen='')