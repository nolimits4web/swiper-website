h4#virtual-example renderExternal Example
p <code>renderExternal</code> allows to bypass slides rendering to other libraries, and can be super handy with libraries like React.js and Vue.js

p With <b>Vue.js</b>
pre
  code.html
    :code
      <template>
        <!-- ... -->
        <div class="swiper-container">
          <div class="swiper-wrapper">
            <!-- It is important to set "left" style prop on every slide -->
            <div class="swiper-slide"
              v-for="(slide, index) in virtualData.slides"
              :key="index"
              :style="{left: `${virtualData.offset}px`}"
            >{{slide}}</div>
          </div>
        </div>
        <!-- ... -->
      </template>
      <script>
        import Swiper from 'swiper/dist/js/swiper.esm.bundle';

        export default {
          data() {
            return {
              // dummy slides data
              slides: (function () {
                var slides = [];
                for (var i = 0; i < 600; i += 1) {
                  slides.push('Slide ' + (i + 1));
                }
                return slides;
              }()),
              // virtual data
              virtualData: {
                slides: [],
              },
            }
          },
          mounted() {
            const self = this;
            const swiper = new Swiper('.swiper-container', {
              // ...
              virtual: {
                slides: self.slides,
                renderExternal(data) {
                  // assign virtual slides data
                  self.virtualData = data;
                },
              },
            });
          },
        };
      </script>
p With <b>React.js</b>
pre
  code.js
    :code
      import React from 'react';
      import Swiper from 'swiper/dist/js/swiper.esm.bundle';

      export default class extends React.Component {
        constructor() {
          this.state = {
            // dummy slides data
            slides: (function () {
              var slides = [];
              for (var i = 0; i < 600; i += 1) {
                slides.push('Slide ' + (i + 1));
              }
              return slides;
            }()),
            // virtual data
            virtualData: {
              slides: [],
            },
          }
        }
        componentDidMount() {
          const swiper = new Swiper('.swiper-container', {
            // ...
            virtual: {
              slides: this.state.slides,
              renderExternal: (data) => {
                // assign virtual slides data
                this.virtualData = data
              },
            },
          });
        }
        render() {
          {/* ... */}
          <div className="swiper-container">
            <div className="swiper-wrapper">
              {/* It is important to set "left" style prop on every slide */}
              {this.state.virtualData.slides.map((slide, index) => (
                <div className="swiper-slide"
                  key={index}
                  style={{left: `${virtualData.offset}px`}}
                >{slide}</div>
              ))}
            </div>
          </div>
          {/* ... */}
        }
      }
